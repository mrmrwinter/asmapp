###############################################################################
# FLUFF
##################################################

# rule dotplots:
#     input:
#         tsv = config["assembly"] + "/reports/mapped_nonself_hits.sam",
#         assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta"
#     output:
#         config["assembly"] + "/reports/dotplots/dotplot.png"
#     params:
#         out_dir = config["assembly"] + "/reports/dotplots/"
#     run:
#         from Bio import SeqIO
#         import pandas as pd
#         import os
#         import sys
#         from readpaf import parse_paf
#         import dotplot
#
#         shell("mkdir -p tmp/")
#
#         tmp_tbl = input[0].replace(".paf",".cleaned.sam")
#         print(tmp_tbl)
#         shell("sed '/^@/ d' < " + input[0] + " > " + tmp_tbl)
#
#         df = pd.read_csv(tmp_tbl, sep = '\t')
#         seqs = input[1]
# #
#         for index, value in df.iterrows():
#             query = value[0]
#             hit = value[2]
#             print(query + " pairs with " + hit)
#             for record in SeqIO.parse(seqs,'fasta'):
#                 q_seq=[]
#                 h_seq=[]
#                 if record.id == query:
#                     q_seq = ">" + record.id + "\n" + record.seq + "\n"
#                     with open('tmp/' + query + '.fasta', 'a+', newline='\n') as g:
#                         SeqIO.write(record, g, 'fasta-2line')
#                     g.close()
#                     print(q_seq)
#                 if record.id == hit:
#                     h_seq = ">" + record.id + "\n" + record.seq + "\n"
#                     with open('tmp/' + hit + '.fasta', 'a+', newline='\n') as r:
#                         SeqIO.write(record, r, 'fasta-2line')
#                     r.close()
#                     print(h_seq)
#             shell("dotplot --drawer matplotlib --fasta tmp/" + str(query) + ".fasta tmp/" + str(hit) + ".fasta > " + params[0] + str(query) + ".dotplot.png")



# run:
#     from Bio import SeqIO
#     import os
#
#     if sys.version_info[0] < 3:
#         from StringIO import StringIO
#     else:
#         from io import StringIO
#
#     for seq_record in SeqIO.parse(input[0], "fasta"):
#         contig = '>' + seq_record.description + '\n' + str(seq_record.seq)
# -negative_seqidlist exclude_me
# "blastn -query {input[0]} -db {params[1]} -outfmt '6 qseqid sseqid pident' -out {params[0]}/blast.out"
#                 # q =
#                 # h = df.[1]
#                 # def get_first_pd(condition, df):
#                 #     return df[condition(df)].iloc[0]
#                 # q = str(df.iloc[1]).split('\\t')[0]
#                 # q = q.replace('redundansscaffold','')
#                 # q = int(q)
#                 # h = str(df.iloc[1]).split('\\t')[0]
#                 # h = h.replace('redundansscaffold','')
#                 # h = int(h)
#                 # # hit_row = get_first_pd(lambda x: x(contig != h), df)
#                 # print(h)
#                 # writer.writerow(hit_row)
#
#                 shell("rm " + seq_record.id + "*.out")
#
#         g.close()

#
#

# rule mapping_back:
#     input:
#         assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta"
#     output:
#         tsv = config["assembly"] + "/reports/minimap2/mapped_nonself_hits.sam"
#     params:
#         threads = config["threads"]
#     shell:
#         "minimap2 -ax asm5 -D {input[0]} {input[0]} > {output}"
#
# # rule removing_nonself:
# #     input:
# #         tsv = config["assembly"] + "/reports/mapped_hits.sam"
# #     output:
# #         tsv = config["assembly"] + "/reports/mapped_nonself_hits.sam"
# #     shell:
# #         "samtools view -F0x900 {input} > {output}"
