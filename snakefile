# KARYON LONGREAD

configfile: "config.yaml"

ruleorder: index_mapping > samtools_index > samtools_faidx > GATK > bcftools > samtools_flagstats

rule all:
    input:
        plot = config["assembly"] + "/outputs/plots/plot.png"

rule redundans:
    conda:
        "envs/redundans.yaml"
    input:
        assembly = "data/assemblies/" + config["assembly"] + ".fasta",
        reads = "data/reads/" + config["reads"] + ".fastq.gz"
    output:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa",
    params:
        out_pfx = config["assembly"] + "/outputs/redundans/"
    shell:
        "rm -rf {params[out_pfx]} && " + config["redundans_path"] + "/redundans.py --fasta {input[assembly]} --outdir {params[out_pfx]} --threads 12 --longreads {input[reads]} --verbose"

rule dictionary_creation:
    input:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa"
    output:
        dictionary = config["assembly"] + ".dict"
    shell:
       "java -Xmx " + config["memory"] + " -jar " + config["picard-tools"] + " CreateSequenceDictionary.jar R={input[assembly]} O={output}"

rule index_mapping:
    input:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa"
    output:
        fai = config["assembly"] + "/outputs/mapping/scaffolds.reduced.fa.fai"
    shell:
       "bwa index {input[assembly]} > {output}"        # change this to minimap

rule mapping:
    input:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa",
        reads = "data/reads/" + config["reads"] + ".fastq.gz"
    output:
        bam = config["assembly"] + "/outputs/mapping/scaffolds.reduced.sorted.bam"
    shell:
        "bwa -r {input[assembly]} -f1 {input[reads]} -n {config[assembly]} -B -S"

rule samtools_index:
    input:
       bam = config["assembly"] + "/outputs/mapping/scaffolds.reduced.sorted.bam"
    output:
       bai = config["assembly"] + "/outputs/mapping/scaffolds.reduced.sorted.bam.bai"
    shell:
       "samtools index {input[bam]} > {output}"

rule samtools_faidx:
    input:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa"
    output:
        fai = config["assembly"] + "/outputs/mapping/scaffolds.reduced.fa.fai"
    shell:
        "samtools faidx {input[assembly]} > {output}"

rule GATK:
    input:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa",
        bam = config["assembly"] + "/outputs/mapping/scaffolds.reduced.sorted.bam"
    output:
        vcf = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.vcf"
    params:
        memory = config["memory"]
    shell:
        "GATK --java-options -Xmx {params[memory]} HaplotypeCaller -R {input[assembly]} -I {input[bam]} -O {output}"

rule bcftools:
    input:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa",
        bam = config["assembly"] + "/outputs/mapping/scaffolds.reduced.sorted.bam"
    output:
        mpileup = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.mpileup"
    shell:
        "bcftools mpileup --fasta-ref {input[assembly]} {input[bam]} > {output}"

rule samtools_flagstats:
    input:
        bam = config["assembly"] + "/outputs/mapping/scaffolds.reduced.sorted.bam"
    output:
        flagstats = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.flagstat"
    shell:
        "samtools flagstats {input[bam]} > {output}"

rule karyon_plots:
    input:
        assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fa",
        mpileup = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.mpileup",
        flagstats = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.flagstat",
        bam = config["assembly"] + "/outputs/mapping/scaffolds.reduced.sorted.bam",
        vcf = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.vcf"
    output:
        plot = config["assembly"] + "/outputs/plots/plot.png"
    params:
        out_pfx = config["assembly"] + "/outputs/plots",
        out_name = config["assembly"]
    shell:
        "python3 scripts/karyon_plots.py --fasta {input[assembly]} --output_directory {params[out_pfx]} --output_name {params[out_name]} --vcf {input[vcf]} --pileup {input[mpileup]} --bam {input[bam]} --library --configuration --wsize --max_scaf2plot --scafminsize --scafmaxsize --job_id"        # Identifier of the intermediate files generated by the different programs. If false, the program will assign a name consisting of a string of 6 random alphanumeric characters.')"
