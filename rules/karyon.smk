###############################################################################

# KARYON PLOIDY PLOTS

# rule dictionary_creation:
#     input:
#         assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta"
#     output:
#         dictionary = config["assembly"] + "/outputs/redundans/scaffolds.reduced.dict"
#     shell:
#        "picard CreateSequenceDictionary -R {input[assembly]} -O {output}"
#
#
# rule fix_bam:
#     input:
#         bam = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.bam",
#     output:
#         bam = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.tagged.bam",
#     params:
#         seq_tech = config["seq_tech"]
#     shell:
#         "picard AddOrReplaceReadGroups \
#         -I {input} \
#         -O {output} \
#         -RGLB lib1 \
#         -RGPL {params[seq_tech]} \
#         -RGPU unit1 \
#         -RGSM Random"
#
#
# rule GATK:
# #    container:
# #        "docker://broadinstitute/gatk"
#     input:
#         assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta",
#         faidx = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta.fai",
#         bam = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.tagged.bam",
#         bai = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.tagged.bam.bai",
#         dict = config["assembly"] + "/outputs/redundans/scaffolds.reduced.dict"
#     output:
#         vcf = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.vcf"
#     params:
#         memory = config["memory"] + "G",
#     shell:
#         config["gatk_path"] + "/gatk HaplotypeCaller -R {input[assembly]} -I {input[bam]} -O {output}"
#
#
# rule bcftools:
# #    conda:
# #        "envs/v_calling.yaml"
#     input:
#         assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta",
#         faidx = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta.fai",
#         bam = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.bam",
#         bai = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.bam.bai",
#     output:
#         mpileup = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.mpileup"
#     shell:
#         # "bcftools mpileup -Ou -f {input[0]} {input[2]} | \
#         # bcftools call -Ou -mv | \
#         # bcftools filter -s LowQual -e '%QUAL<10 || DP>100' > {output}"
#         # "bcftools mpileup -Ov -f {input[assembly]} {input[bam]} -o {output}"
#         "samtools mpileup -B -f {input[assembly]} -v {input[bam]} -o {output}"
#
# rule samtools_flagstats:
#     input:
#         bam = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.tagged.bam"
#     output:
#         flagstats = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.flagstat"
#     shell:
#         "samtools flagstat {input[bam]} > {output}"
#
#
# rule karyon_plots:
#     # container:
#     #     "docker://gabaldonlab/karyon"
#     conda:
#         "envs/karyon.yaml"
#     input:
#         assembly = config["assembly"] + "/outputs/redundans/scaffolds.reduced.fasta",
#         mpileup = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.mpileup",
#         flagstats = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.flagstat",
#         bam = config["assembly"] + "/outputs/redundans/scaffolds.reduced.sorted.tagged.bam",
#         vcf = config["assembly"] + "/outputs/variant_calling/scaffolds.reduced.vcf",
#         reads = "data/reads/" + config["reads"] + ".fastq.gz"
#     output:
#         plot = config["assembly"] + "/outputs/plots/plot.png"
#     params:
#         home = config["full_path"],
#         out_pfx = config["assembly"] + "/outputs/plots",
#         out_name = config["assembly"]
#     shell:
#         # "python3 " + config["karyon_path"] + "/allplots.py -f {params[0]}{input[assembly]} -d {params[0]}{params[out_pfx]} -o {params[out_name]} -v {params[0]}{input[vcf]} -p {params[0]}{input[mpileup]} -b {params[0]}{input[bam]} -l {params[0]}{input[reads]} --configuration configuration.txt" #-wsize --max_scaf2plot --scafminsize --scafmaxsize --job_id"        # Identifier of the intermediate files generated by the different programs. If false, the program will assign a name consisting of a string of 6 random alphanumeric characters.')"
#         "python3 scripts/allplots.py -f {params[0]}{input[assembly]} -d {params[0]}{params[out_pfx]} -o {params[out_name]} -v {params[0]}{input[vcf]} -p {params[0]}{input[mpileup]} -b {params[0]}{input[bam]} -l {params[0]}{input[reads]} --configuration configuration.txt"

